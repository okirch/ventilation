#!/usr/bin/python3
#
# Copyright (C) 2020 Olaf Kirch
#
# For the time being, experimenting with a couple of sensors and displaying
# sensor data
#

from time import sleep, ctime
from math import log
import datetime

class SensorBase:
	def __init__(self, name):
		self.name = name
		self.clear()

	def clear(self):
		self.timestamp = None
		self.temperature = None
		self.humidity = None
		self.pressure = None
		self.dewpoint = None

	def update(self):
		# Read data from the sensor
		self.sense()

		if self.timestamp is None:
			self.timestamp = datetime.datetime.now()

		self.dewpoint = self.dewPoint()

	def dewPoint(self):
		t = self.temperature
		rh = self.humidity
		if t < -65 or t > 60:
			return 0

		if rh < 0 or rh > 100:
			return 0

		if t > 0:
			k2 = 17.62;
			k3 = 243.12;
		else:
			k2 = 22.46;
			k3 = 272.62;

		return k3 * ((k2 * t)/(k3 + t) + log(rh/100))/((k2 * k3)/(k3 + t) - log(rh / 100));


class SensorSenseHat(SensorBase):
	def __init__(self, name):
		from sense_hat import SenseHat

		super(SensorSenseHat, self).__init__(name)

		self.hat = SenseHat()

	def sense(self):
		s = self.hat
		self.temperature = s.get_temperature_from_pressure()
		self.humidity = s.get_humidity()
		self.pressure = s.get_pressure()

class SensorDHT22(SensorBase):
	def __init__(self, name, pin = 4):
		import Adafruit_DHT

		super(SensorDHT22, self).__init__(name)

		self.type = Adafruit_DHT.DHT22
		self.pin = pin

	def sense(self):
		import Adafruit_DHT

		self.humidity, self.temperature = Adafruit_DHT.read_retry(self.type, self.pin)

class SensorBME280(SensorBase):
	def __init__(self, name, bus = 1, address = 0x77):
		import smbus2
		import bme280.bme280_i2c
		import bme280.bme280

		super(SensorBME280, self).__init__(name)

		self._address = address;
		bme280.bme280_i2c.set_default_i2c_address(self._address)

		self._bus = bus
		bme280.bme280_i2c.set_default_bus(bus)

		bme280.bme280.setup()

	def sense(self):
		import bme280.bme280

		data = bme280.bme280.read_all()
		self.temperature = data.temperature
		self.pressure = data.pressure
		self.humidity = data.humidity

class SensorMS8607(SensorBase):
	def __init__(self, name, bus = None, address = None):
		import board
		import busio
		from adafruit_ms8607 import MS8607

		super(SensorMS8607, self).__init__(name)

		i2c = busio.I2C(board.SCL, board.SDA)
		self._sensor = MS8607(i2c)

	def sense(self):
		s = self._sensor
		self.temperature = s.temperature
		self.pressure = s.pressure
		self.humidity = s.relative_humidity

class SenseDataSink(object):
	def __init__(self, name):
		self.name = name

class Logger(SenseDataSink):
	def __init__(self, name):
		super(Logger, self).__init__(name)

class StdoutLogger(Logger):
	def __init__(self, name):
		super(StdoutLogger, self).__init__(name)

	def writeMessage(self, msg):
		print(msg)


class SmallDisplay(SenseDataSink):
	def __init__(self, name):
		super(SmallDisplay, self).__init__(name)

class SparkfunOLED(SmallDisplay):
	def __init__(self, name):
		import qwiic_micro_oled

		super(SparkfunOLED, self).__init__(name)

		self._oled = qwiic_micro_oled.QwiicMicroOled()
		self._oled.set_font_type(1)
		self._oled.clear(self._oled.ALL)
		self._oled.clear(self._oled.PAGE)
		self._oled.begin()

		self._ypos = 0;
		self._lineHeight = self._oled.get_font_height() + 1

	def clear(self):
		self._oled.clear(self._oled.ALL)
		self.home()

	def home(self):
		self._ypos = 0

	def write(self, line):
		import qwiic_micro_oled

		self._oled.set_cursor(0, (self._ypos + 1) * self._lineHeight)

		fn = getattr(self._oled, "print")
		fn(line)

		self._ypos += 1

	def flush(self):
		self._oled.display()

class Renderer(object):
	def __init__(self):
		pass

	def render(self):
		pass

class LogRenderer(Renderer):
	def __init__(self, sensors, sink):
		super(LogRenderer, self).__init__()

		assert(isinstance(sink, Logger))

		# The sensors argument may be an iterator
		self._sensors = list(sensors)
		self._sink = sink

	def render(self):
		for sensor in self._sensors:
			self._sink.writeMessage(self.logMessage(sensor))

	def logMessage(self, sensor):
		when = sensor.timestamp.ctime()
		msg = "%s: %s temp: %3.2f rh: %3.1f%% dew point: %.2f" % (when, sensor.name, sensor.temperature, sensor.humidity, sensor.dewpoint)
		if sensor.pressure is not None:
			msg += " pressure %.0f" % (sensor.pressure)

		return msg

class SmallDisplayRenderer(Renderer):
	def __init__(self, sensor, sink):
		super(SmallDisplayRenderer, self).__init__()

		assert(isinstance(sink, SmallDisplay))

		self._sensor = sensor
		self._sink = sink

	def render(self):
		sensor = self._sensor
		sink = self._sink

		# print("rendering %s to %s" % (sensor.name, sink.name))
		sink.home()
		sink.write("T  %.2f C" % sensor.temperature)
		sink.write("rH %.2f %%" % sensor.humidity)
		sink.write("Td %.2f C" % sensor.dewpoint)
		sink.flush()


class ObjectRegistry(object):
	def __init__(self):
		self.objects = {}

	def add(self, object, name = None):
		if name is None:
			name = object.name
		assert(self.objects.get(name) is None)
		self.objects[name] = object

	def get(self, name):
		return self.objects[name]

	def values(self):
		return self.objects.values()

	def invokeAll(self, methodName):
		for obj in self.objects.values():
			m = getattr(obj, methodName)
			m()

class SensorRegistry(ObjectRegistry):
	def __init__(self):
		super(SensorRegistry, self).__init__()

	def updateAll(self):
		self.invokeAll('update')

class OutputRegistry(ObjectRegistry):
	def __init__(self):
		super(OutputRegistry, self).__init__()

class RendererRegistry(ObjectRegistry):
	def __init__(self):
		super(RendererRegistry, self).__init__()

sensors = SensorRegistry()
sensors.add(SensorBME280("bme280"))
sensors.add(SensorMS8607("ms8607"))

dataSinks = ObjectRegistry()
dataSinks.add(StdoutLogger("logger"))
dataSinks.add(SparkfunOLED("display"))

renderers = []
renderers.append(
	LogRenderer(sensors.values(), dataSinks.get("logger"))
	)
renderers.append(
	SmallDisplayRenderer(sensors.get("ms8607"), dataSinks.get("display"))
	)


while True:
	sensors.updateAll()

	for r in renderers:
		r.render()
	sleep(5)

